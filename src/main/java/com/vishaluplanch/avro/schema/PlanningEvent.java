/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.vishaluplanch.avro.schema;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class PlanningEvent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 7681456158022193976L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"PlanningEvent\",\"namespace\":\"com.vishaluplanch.avro.schema\",\"fields\":[{\"name\":\"eventId\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"eventType\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"publishedDate\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"payload\",\"type\":{\"type\":\"record\",\"name\":\"PlanningEventPayload\",\"fields\":[{\"name\":\"brand\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"market\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"channel\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"brandGuid\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"plannedCustomerChoiceId\",\"type\":[\"null\",\"string\"],\"default\":null}]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<PlanningEvent> ENCODER =
      new BinaryMessageEncoder<PlanningEvent>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<PlanningEvent> DECODER =
      new BinaryMessageDecoder<PlanningEvent>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<PlanningEvent> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<PlanningEvent> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<PlanningEvent>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this PlanningEvent to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a PlanningEvent from a ByteBuffer. */
  public static PlanningEvent fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence eventId;
  @Deprecated public java.lang.CharSequence eventType;
  @Deprecated public java.lang.CharSequence publishedDate;
  @Deprecated public com.vishaluplanch.avro.schema.PlanningEventPayload payload;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public PlanningEvent() {}

  /**
   * All-args constructor.
   * @param eventId The new value for eventId
   * @param eventType The new value for eventType
   * @param publishedDate The new value for publishedDate
   * @param payload The new value for payload
   */
  public PlanningEvent(java.lang.CharSequence eventId, java.lang.CharSequence eventType, java.lang.CharSequence publishedDate, com.vishaluplanch.avro.schema.PlanningEventPayload payload) {
    this.eventId = eventId;
    this.eventType = eventType;
    this.publishedDate = publishedDate;
    this.payload = payload;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return eventId;
    case 1: return eventType;
    case 2: return publishedDate;
    case 3: return payload;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: eventId = (java.lang.CharSequence)value$; break;
    case 1: eventType = (java.lang.CharSequence)value$; break;
    case 2: publishedDate = (java.lang.CharSequence)value$; break;
    case 3: payload = (com.vishaluplanch.avro.schema.PlanningEventPayload)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'eventId' field.
   * @return The value of the 'eventId' field.
   */
  public java.lang.CharSequence getEventId() {
    return eventId;
  }

  /**
   * Sets the value of the 'eventId' field.
   * @param value the value to set.
   */
  public void setEventId(java.lang.CharSequence value) {
    this.eventId = value;
  }

  /**
   * Gets the value of the 'eventType' field.
   * @return The value of the 'eventType' field.
   */
  public java.lang.CharSequence getEventType() {
    return eventType;
  }

  /**
   * Sets the value of the 'eventType' field.
   * @param value the value to set.
   */
  public void setEventType(java.lang.CharSequence value) {
    this.eventType = value;
  }

  /**
   * Gets the value of the 'publishedDate' field.
   * @return The value of the 'publishedDate' field.
   */
  public java.lang.CharSequence getPublishedDate() {
    return publishedDate;
  }

  /**
   * Sets the value of the 'publishedDate' field.
   * @param value the value to set.
   */
  public void setPublishedDate(java.lang.CharSequence value) {
    this.publishedDate = value;
  }

  /**
   * Gets the value of the 'payload' field.
   * @return The value of the 'payload' field.
   */
  public com.vishaluplanch.avro.schema.PlanningEventPayload getPayload() {
    return payload;
  }

  /**
   * Sets the value of the 'payload' field.
   * @param value the value to set.
   */
  public void setPayload(com.vishaluplanch.avro.schema.PlanningEventPayload value) {
    this.payload = value;
  }

  /**
   * Creates a new PlanningEvent RecordBuilder.
   * @return A new PlanningEvent RecordBuilder
   */
  public static com.vishaluplanch.avro.schema.PlanningEvent.Builder newBuilder() {
    return new com.vishaluplanch.avro.schema.PlanningEvent.Builder();
  }

  /**
   * Creates a new PlanningEvent RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new PlanningEvent RecordBuilder
   */
  public static com.vishaluplanch.avro.schema.PlanningEvent.Builder newBuilder(com.vishaluplanch.avro.schema.PlanningEvent.Builder other) {
    return new com.vishaluplanch.avro.schema.PlanningEvent.Builder(other);
  }

  /**
   * Creates a new PlanningEvent RecordBuilder by copying an existing PlanningEvent instance.
   * @param other The existing instance to copy.
   * @return A new PlanningEvent RecordBuilder
   */
  public static com.vishaluplanch.avro.schema.PlanningEvent.Builder newBuilder(com.vishaluplanch.avro.schema.PlanningEvent other) {
    return new com.vishaluplanch.avro.schema.PlanningEvent.Builder(other);
  }

  /**
   * RecordBuilder for PlanningEvent instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<PlanningEvent>
    implements org.apache.avro.data.RecordBuilder<PlanningEvent> {

    private java.lang.CharSequence eventId;
    private java.lang.CharSequence eventType;
    private java.lang.CharSequence publishedDate;
    private com.vishaluplanch.avro.schema.PlanningEventPayload payload;
    private com.vishaluplanch.avro.schema.PlanningEventPayload.Builder payloadBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.vishaluplanch.avro.schema.PlanningEvent.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.eventId)) {
        this.eventId = data().deepCopy(fields()[0].schema(), other.eventId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.eventType)) {
        this.eventType = data().deepCopy(fields()[1].schema(), other.eventType);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.publishedDate)) {
        this.publishedDate = data().deepCopy(fields()[2].schema(), other.publishedDate);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.payload)) {
        this.payload = data().deepCopy(fields()[3].schema(), other.payload);
        fieldSetFlags()[3] = true;
      }
      if (other.hasPayloadBuilder()) {
        this.payloadBuilder = com.vishaluplanch.avro.schema.PlanningEventPayload.newBuilder(other.getPayloadBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing PlanningEvent instance
     * @param other The existing instance to copy.
     */
    private Builder(com.vishaluplanch.avro.schema.PlanningEvent other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.eventId)) {
        this.eventId = data().deepCopy(fields()[0].schema(), other.eventId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.eventType)) {
        this.eventType = data().deepCopy(fields()[1].schema(), other.eventType);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.publishedDate)) {
        this.publishedDate = data().deepCopy(fields()[2].schema(), other.publishedDate);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.payload)) {
        this.payload = data().deepCopy(fields()[3].schema(), other.payload);
        fieldSetFlags()[3] = true;
      }
      this.payloadBuilder = null;
    }

    /**
      * Gets the value of the 'eventId' field.
      * @return The value.
      */
    public java.lang.CharSequence getEventId() {
      return eventId;
    }

    /**
      * Sets the value of the 'eventId' field.
      * @param value The value of 'eventId'.
      * @return This builder.
      */
    public com.vishaluplanch.avro.schema.PlanningEvent.Builder setEventId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.eventId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'eventId' field has been set.
      * @return True if the 'eventId' field has been set, false otherwise.
      */
    public boolean hasEventId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'eventId' field.
      * @return This builder.
      */
    public com.vishaluplanch.avro.schema.PlanningEvent.Builder clearEventId() {
      eventId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'eventType' field.
      * @return The value.
      */
    public java.lang.CharSequence getEventType() {
      return eventType;
    }

    /**
      * Sets the value of the 'eventType' field.
      * @param value The value of 'eventType'.
      * @return This builder.
      */
    public com.vishaluplanch.avro.schema.PlanningEvent.Builder setEventType(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.eventType = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'eventType' field has been set.
      * @return True if the 'eventType' field has been set, false otherwise.
      */
    public boolean hasEventType() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'eventType' field.
      * @return This builder.
      */
    public com.vishaluplanch.avro.schema.PlanningEvent.Builder clearEventType() {
      eventType = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'publishedDate' field.
      * @return The value.
      */
    public java.lang.CharSequence getPublishedDate() {
      return publishedDate;
    }

    /**
      * Sets the value of the 'publishedDate' field.
      * @param value The value of 'publishedDate'.
      * @return This builder.
      */
    public com.vishaluplanch.avro.schema.PlanningEvent.Builder setPublishedDate(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.publishedDate = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'publishedDate' field has been set.
      * @return True if the 'publishedDate' field has been set, false otherwise.
      */
    public boolean hasPublishedDate() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'publishedDate' field.
      * @return This builder.
      */
    public com.vishaluplanch.avro.schema.PlanningEvent.Builder clearPublishedDate() {
      publishedDate = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'payload' field.
      * @return The value.
      */
    public com.vishaluplanch.avro.schema.PlanningEventPayload getPayload() {
      return payload;
    }

    /**
      * Sets the value of the 'payload' field.
      * @param value The value of 'payload'.
      * @return This builder.
      */
    public com.vishaluplanch.avro.schema.PlanningEvent.Builder setPayload(com.vishaluplanch.avro.schema.PlanningEventPayload value) {
      validate(fields()[3], value);
      this.payloadBuilder = null;
      this.payload = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'payload' field has been set.
      * @return True if the 'payload' field has been set, false otherwise.
      */
    public boolean hasPayload() {
      return fieldSetFlags()[3];
    }

    /**
     * Gets the Builder instance for the 'payload' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.vishaluplanch.avro.schema.PlanningEventPayload.Builder getPayloadBuilder() {
      if (payloadBuilder == null) {
        if (hasPayload()) {
          setPayloadBuilder(com.vishaluplanch.avro.schema.PlanningEventPayload.newBuilder(payload));
        } else {
          setPayloadBuilder(com.vishaluplanch.avro.schema.PlanningEventPayload.newBuilder());
        }
      }
      return payloadBuilder;
    }

    /**
     * Sets the Builder instance for the 'payload' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.vishaluplanch.avro.schema.PlanningEvent.Builder setPayloadBuilder(com.vishaluplanch.avro.schema.PlanningEventPayload.Builder value) {
      clearPayload();
      payloadBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'payload' field has an active Builder instance
     * @return True if the 'payload' field has an active Builder instance
     */
    public boolean hasPayloadBuilder() {
      return payloadBuilder != null;
    }

    /**
      * Clears the value of the 'payload' field.
      * @return This builder.
      */
    public com.vishaluplanch.avro.schema.PlanningEvent.Builder clearPayload() {
      payload = null;
      payloadBuilder = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public PlanningEvent build() {
      try {
        PlanningEvent record = new PlanningEvent();
        record.eventId = fieldSetFlags()[0] ? this.eventId : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.eventType = fieldSetFlags()[1] ? this.eventType : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.publishedDate = fieldSetFlags()[2] ? this.publishedDate : (java.lang.CharSequence) defaultValue(fields()[2]);
        if (payloadBuilder != null) {
          record.payload = this.payloadBuilder.build();
        } else {
          record.payload = fieldSetFlags()[3] ? this.payload : (com.vishaluplanch.avro.schema.PlanningEventPayload) defaultValue(fields()[3]);
        }
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<PlanningEvent>
    WRITER$ = (org.apache.avro.io.DatumWriter<PlanningEvent>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<PlanningEvent>
    READER$ = (org.apache.avro.io.DatumReader<PlanningEvent>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
